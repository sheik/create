package main

// Code generated by peg -noast -switch -inline -strict -output Createfile.go Createfile.peg DO NOT EDIT.

import (
	"fmt"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleExpr
	ruleSpacing
	ruleWhiteSpace
	ruleLongComment
	ruleLineComment
	rulePragma
	ruleAssignmentExpression
	ruleAssignmentOperator
	ruleUnaryExpression
	ruleIdentifier
	ruleIdNondigit
	ruleIdChar
	ruleKeyword
	ruleEQU
	ruleUniversalCharacter
	ruleHexQuad
	ruleHexDigit
)

var rul3s = [...]string{
	"Unknown",
	"Expr",
	"Spacing",
	"WhiteSpace",
	"LongComment",
	"LineComment",
	"Pragma",
	"AssignmentExpression",
	"AssignmentOperator",
	"UnaryExpression",
	"Identifier",
	"IdNondigit",
	"IdChar",
	"Keyword",
	"EQU",
	"UniversalCharacter",
	"HexQuad",
	"HexDigit",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type Createfile struct {
	AssignmentExpression

	Buffer string
	buffer []rune
	rules  [18]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
}

func (p *Createfile) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Createfile) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Createfile
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func Pretty(pretty bool) func(*Createfile) error {
	return func(p *Createfile) error {
		p.Pretty = pretty
		return nil
	}
}

func (p *Createfile) Init(options ...func(*Createfile) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		if matches {
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Expr <- <AssignmentExpression> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleAssignmentExpression]() {
					goto l0
				}
				add(ruleExpr, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Spacing <- <(LongComment / ((&('#') Pragma) | (&('/') LineComment) | (&('\t' | '\n' | '\r' | ' ') WhiteSpace)))*> */
		func() bool {
			{
				position3 := position
			l4:
				{
					position5, tokenIndex5 := position, tokenIndex
					{
						position6, tokenIndex6 := position, tokenIndex
						{
							position8 := position
							if buffer[position] != rune('/') {
								goto l7
							}
							position++
							if buffer[position] != rune('*') {
								goto l7
							}
							position++
						l9:
							{
								position10, tokenIndex10 := position, tokenIndex
								{
									position11, tokenIndex11 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l11
									}
									position++
									if buffer[position] != rune('/') {
										goto l11
									}
									position++
									goto l10
								l11:
									position, tokenIndex = position11, tokenIndex11
								}
								if !matchDot() {
									goto l10
								}
								goto l9
							l10:
								position, tokenIndex = position10, tokenIndex10
							}
							if buffer[position] != rune('*') {
								goto l7
							}
							position++
							if buffer[position] != rune('/') {
								goto l7
							}
							position++
							add(ruleLongComment, position8)
						}
						goto l6
					l7:
						position, tokenIndex = position6, tokenIndex6
						{
							switch buffer[position] {
							case '#':
								{
									position13 := position
									if buffer[position] != rune('#') {
										goto l5
									}
									position++
								l14:
									{
										position15, tokenIndex15 := position, tokenIndex
										{
											position16, tokenIndex16 := position, tokenIndex
											if buffer[position] != rune('\n') {
												goto l16
											}
											position++
											goto l15
										l16:
											position, tokenIndex = position16, tokenIndex16
										}
										if !matchDot() {
											goto l15
										}
										goto l14
									l15:
										position, tokenIndex = position15, tokenIndex15
									}
									add(rulePragma, position13)
								}
							case '/':
								{
									position17 := position
									if buffer[position] != rune('/') {
										goto l5
									}
									position++
									if buffer[position] != rune('/') {
										goto l5
									}
									position++
								l18:
									{
										position19, tokenIndex19 := position, tokenIndex
										{
											position20, tokenIndex20 := position, tokenIndex
											if buffer[position] != rune('\n') {
												goto l20
											}
											position++
											goto l19
										l20:
											position, tokenIndex = position20, tokenIndex20
										}
										if !matchDot() {
											goto l19
										}
										goto l18
									l19:
										position, tokenIndex = position19, tokenIndex19
									}
									add(ruleLineComment, position17)
								}
							default:
								{
									position21 := position
									{
										switch buffer[position] {
										case '\t':
											if buffer[position] != rune('\t') {
												goto l5
											}
											position++
										case '\r':
											if buffer[position] != rune('\r') {
												goto l5
											}
											position++
										case '\n':
											if buffer[position] != rune('\n') {
												goto l5
											}
											position++
										default:
											if buffer[position] != rune(' ') {
												goto l5
											}
											position++
										}
									}

									add(ruleWhiteSpace, position21)
								}
							}
						}

					}
				l6:
					goto l4
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				add(ruleSpacing, position3)
			}
			return true
		},
		/* 2 WhiteSpace <- <((&('\t') '\t') | (&('\r') '\r') | (&('\n') '\n') | (&(' ') ' '))> */
		nil,
		/* 3 LongComment <- <('/' '*' (!('*' '/') .)* ('*' '/'))> */
		nil,
		/* 4 LineComment <- <('/' '/' (!'\n' .)*)> */
		nil,
		/* 5 Pragma <- <('#' (!'\n' .)*)> */
		nil,
		/* 6 AssignmentExpression <- <(UnaryExpression AssignmentOperator AssignmentExpression)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
				{
					position29 := position
					{
						position30 := position
						{
							position31, tokenIndex31 := position, tokenIndex
							{
								position32 := position
								if buffer[position] != rune('s') {
									goto l31
								}
								position++
								if buffer[position] != rune('h') {
									goto l31
								}
								position++
								if buffer[position] != rune('e') {
									goto l31
								}
								position++
								if buffer[position] != rune('l') {
									goto l31
								}
								position++
								if buffer[position] != rune('l') {
									goto l31
								}
								position++
								add(ruleKeyword, position32)
							}
							goto l27
						l31:
							position, tokenIndex = position31, tokenIndex31
						}
						{
							position33 := position
							{
								switch buffer[position] {
								case '\\':
									if !_rules[ruleUniversalCharacter]() {
										goto l27
									}
								case '_':
									if buffer[position] != rune('_') {
										goto l27
									}
									position++
								case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l27
									}
									position++
								default:
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l27
									}
									position++
								}
							}

							add(ruleIdNondigit, position33)
						}
					l35:
						{
							position36, tokenIndex36 := position, tokenIndex
							{
								position37 := position
								{
									switch buffer[position] {
									case '\\':
										if !_rules[ruleUniversalCharacter]() {
											goto l36
										}
									case '_':
										if buffer[position] != rune('_') {
											goto l36
										}
										position++
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l36
										}
										position++
									case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l36
										}
										position++
									default:
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l36
										}
										position++
									}
								}

								add(ruleIdChar, position37)
							}
							goto l35
						l36:
							position, tokenIndex = position36, tokenIndex36
						}
						if !_rules[ruleSpacing]() {
							goto l27
						}
						add(ruleIdentifier, position30)
					}
					add(ruleUnaryExpression, position29)
				}
				{
					position39 := position
					{
						position40 := position
						if buffer[position] != rune('=') {
							goto l27
						}
						position++
						{
							position41, tokenIndex41 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l41
							}
							position++
							goto l27
						l41:
							position, tokenIndex = position41, tokenIndex41
						}
						if !_rules[ruleSpacing]() {
							goto l27
						}
						add(ruleEQU, position40)
					}
					add(ruleAssignmentOperator, position39)
				}
				if !_rules[ruleAssignmentExpression]() {
					goto l27
				}
				add(ruleAssignmentExpression, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 7 AssignmentOperator <- <EQU> */
		nil,
		/* 8 UnaryExpression <- <Identifier> */
		nil,
		/* 9 Identifier <- <(!Keyword IdNondigit IdChar* Spacing)> */
		nil,
		/* 10 IdNondigit <- <((&('\\') UniversalCharacter) | (&('_') '_') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 11 IdChar <- <((&('\\') UniversalCharacter) | (&('_') '_') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))> */
		nil,
		/* 12 Keyword <- <('s' 'h' 'e' 'l' 'l')> */
		nil,
		/* 13 EQU <- <('=' !'=' Spacing)> */
		nil,
		/* 14 UniversalCharacter <- <(('\\' 'u' HexQuad) / ('\\' 'U' HexQuad HexQuad))> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				{
					position51, tokenIndex51 := position, tokenIndex
					if buffer[position] != rune('\\') {
						goto l52
					}
					position++
					if buffer[position] != rune('u') {
						goto l52
					}
					position++
					if !_rules[ruleHexQuad]() {
						goto l52
					}
					goto l51
				l52:
					position, tokenIndex = position51, tokenIndex51
					if buffer[position] != rune('\\') {
						goto l49
					}
					position++
					if buffer[position] != rune('U') {
						goto l49
					}
					position++
					if !_rules[ruleHexQuad]() {
						goto l49
					}
					if !_rules[ruleHexQuad]() {
						goto l49
					}
				}
			l51:
				add(ruleUniversalCharacter, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 15 HexQuad <- <(HexDigit HexDigit HexDigit HexDigit)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
				if !_rules[ruleHexDigit]() {
					goto l53
				}
				if !_rules[ruleHexDigit]() {
					goto l53
				}
				if !_rules[ruleHexDigit]() {
					goto l53
				}
				if !_rules[ruleHexDigit]() {
					goto l53
				}
				add(ruleHexQuad, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 16 HexDigit <- <((&('A' | 'B' | 'C' | 'D' | 'E' | 'F') [A-F]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f') [a-f]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]))> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				{
					switch buffer[position] {
					case 'A', 'B', 'C', 'D', 'E', 'F':
						if c := buffer[position]; c < rune('A') || c > rune('F') {
							goto l55
						}
						position++
					case 'a', 'b', 'c', 'd', 'e', 'f':
						if c := buffer[position]; c < rune('a') || c > rune('f') {
							goto l55
						}
						position++
					default:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l55
						}
						position++
					}
				}

				add(ruleHexDigit, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
	}
	p.rules = _rules
	return nil
}
